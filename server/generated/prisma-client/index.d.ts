// Code generated by Prisma (prisma@1.28.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  ingredient: (where?: IngredientWhereInput) => Promise<boolean>;
  item: (where?: ItemWhereInput) => Promise<boolean>;
  recipe: (where?: RecipeWhereInput) => Promise<boolean>;
  step: (where?: StepWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  ingredient: (where: IngredientWhereUniqueInput) => IngredientPromise;
  ingredients: (
    args?: {
      where?: IngredientWhereInput;
      orderBy?: IngredientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Ingredient>;
  ingredientsConnection: (
    args?: {
      where?: IngredientWhereInput;
      orderBy?: IngredientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => IngredientConnectionPromise;
  item: (where: ItemWhereUniqueInput) => ItemPromise;
  items: (
    args?: {
      where?: ItemWhereInput;
      orderBy?: ItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Item>;
  itemsConnection: (
    args?: {
      where?: ItemWhereInput;
      orderBy?: ItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ItemConnectionPromise;
  recipe: (where: RecipeWhereUniqueInput) => RecipePromise;
  recipes: (
    args?: {
      where?: RecipeWhereInput;
      orderBy?: RecipeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Recipe>;
  recipesConnection: (
    args?: {
      where?: RecipeWhereInput;
      orderBy?: RecipeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RecipeConnectionPromise;
  step: (where: StepWhereUniqueInput) => StepPromise;
  steps: (
    args?: {
      where?: StepWhereInput;
      orderBy?: StepOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Step>;
  stepsConnection: (
    args?: {
      where?: StepWhereInput;
      orderBy?: StepOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => StepConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createIngredient: (data: IngredientCreateInput) => IngredientPromise;
  updateIngredient: (
    args: { data: IngredientUpdateInput; where: IngredientWhereUniqueInput }
  ) => IngredientPromise;
  updateManyIngredients: (
    args: {
      data: IngredientUpdateManyMutationInput;
      where?: IngredientWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertIngredient: (
    args: {
      where: IngredientWhereUniqueInput;
      create: IngredientCreateInput;
      update: IngredientUpdateInput;
    }
  ) => IngredientPromise;
  deleteIngredient: (where: IngredientWhereUniqueInput) => IngredientPromise;
  deleteManyIngredients: (where?: IngredientWhereInput) => BatchPayloadPromise;
  createItem: (data: ItemCreateInput) => ItemPromise;
  updateItem: (
    args: { data: ItemUpdateInput; where: ItemWhereUniqueInput }
  ) => ItemPromise;
  updateManyItems: (
    args: { data: ItemUpdateManyMutationInput; where?: ItemWhereInput }
  ) => BatchPayloadPromise;
  upsertItem: (
    args: {
      where: ItemWhereUniqueInput;
      create: ItemCreateInput;
      update: ItemUpdateInput;
    }
  ) => ItemPromise;
  deleteItem: (where: ItemWhereUniqueInput) => ItemPromise;
  deleteManyItems: (where?: ItemWhereInput) => BatchPayloadPromise;
  createRecipe: (data: RecipeCreateInput) => RecipePromise;
  updateRecipe: (
    args: { data: RecipeUpdateInput; where: RecipeWhereUniqueInput }
  ) => RecipePromise;
  updateManyRecipes: (
    args: { data: RecipeUpdateManyMutationInput; where?: RecipeWhereInput }
  ) => BatchPayloadPromise;
  upsertRecipe: (
    args: {
      where: RecipeWhereUniqueInput;
      create: RecipeCreateInput;
      update: RecipeUpdateInput;
    }
  ) => RecipePromise;
  deleteRecipe: (where: RecipeWhereUniqueInput) => RecipePromise;
  deleteManyRecipes: (where?: RecipeWhereInput) => BatchPayloadPromise;
  createStep: (data: StepCreateInput) => StepPromise;
  updateStep: (
    args: { data: StepUpdateInput; where: StepWhereUniqueInput }
  ) => StepPromise;
  updateManySteps: (
    args: { data: StepUpdateManyMutationInput; where?: StepWhereInput }
  ) => BatchPayloadPromise;
  upsertStep: (
    args: {
      where: StepWhereUniqueInput;
      create: StepCreateInput;
      update: StepUpdateInput;
    }
  ) => StepPromise;
  deleteStep: (where: StepWhereUniqueInput) => StepPromise;
  deleteManySteps: (where?: StepWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  ingredient: (
    where?: IngredientSubscriptionWhereInput
  ) => IngredientSubscriptionPayloadSubscription;
  item: (
    where?: ItemSubscriptionWhereInput
  ) => ItemSubscriptionPayloadSubscription;
  recipe: (
    where?: RecipeSubscriptionWhereInput
  ) => RecipeSubscriptionPayloadSubscription;
  step: (
    where?: StepSubscriptionWhereInput
  ) => StepSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type StepOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "directions_ASC"
  | "directions_DESC"
  | "notes_ASC"
  | "notes_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type IngredientOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "unit_ASC"
  | "unit_DESC"
  | "processing_ASC"
  | "processing_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RecipeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "time_ASC"
  | "time_DESC"
  | "skill_ASC"
  | "skill_DESC"
  | "course_ASC"
  | "course_DESC"
  | "description_ASC"
  | "description_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "emailVerified_ASC"
  | "emailVerified_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface IngredientUpdateWithWhereUniqueNestedInput {
  where: IngredientWhereUniqueInput;
  data: IngredientUpdateDataInput;
}

export type IngredientWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpsertWithoutRecipesInput {
  update: UserUpdateWithoutRecipesDataInput;
  create: UserCreateWithoutRecipesInput;
}

export interface IngredientUpdateManyWithWhereNestedInput {
  where: IngredientScalarWhereInput;
  data: IngredientUpdateManyDataInput;
}

export interface IngredientCreateInput {
  name: String;
  quantity: Float;
  unit?: String;
  processing?: String;
}

export interface StepSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StepWhereInput;
  AND?: StepSubscriptionWhereInput[] | StepSubscriptionWhereInput;
  OR?: StepSubscriptionWhereInput[] | StepSubscriptionWhereInput;
  NOT?: StepSubscriptionWhereInput[] | StepSubscriptionWhereInput;
}

export interface IngredientUpdateInput {
  name?: String;
  quantity?: Float;
  unit?: String;
  processing?: String;
}

export type ItemWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface IngredientUpdateManyMutationInput {
  name?: String;
  quantity?: Float;
  unit?: String;
  processing?: String;
}

export interface StepWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  directions?: String;
  directions_not?: String;
  directions_in?: String[] | String;
  directions_not_in?: String[] | String;
  directions_lt?: String;
  directions_lte?: String;
  directions_gt?: String;
  directions_gte?: String;
  directions_contains?: String;
  directions_not_contains?: String;
  directions_starts_with?: String;
  directions_not_starts_with?: String;
  directions_ends_with?: String;
  directions_not_ends_with?: String;
  notes?: String;
  notes_not?: String;
  notes_in?: String[] | String;
  notes_not_in?: String[] | String;
  notes_lt?: String;
  notes_lte?: String;
  notes_gt?: String;
  notes_gte?: String;
  notes_contains?: String;
  notes_not_contains?: String;
  notes_starts_with?: String;
  notes_not_starts_with?: String;
  notes_ends_with?: String;
  notes_not_ends_with?: String;
  ingredients_every?: IngredientWhereInput;
  ingredients_some?: IngredientWhereInput;
  ingredients_none?: IngredientWhereInput;
  AND?: StepWhereInput[] | StepWhereInput;
  OR?: StepWhereInput[] | StepWhereInput;
  NOT?: StepWhereInput[] | StepWhereInput;
}

export interface ItemUpsertWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput;
  update: ItemUpdateDataInput;
  create: ItemCreateInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
  name?: String;
  avatar?: String;
  slug?: String;
  emailVerified?: Boolean;
}

export interface ItemUpdateDataInput {
  name?: String;
  steps?: StepUpdateManyInput;
}

export interface IngredientWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  quantity?: Float;
  quantity_not?: Float;
  quantity_in?: Float[] | Float;
  quantity_not_in?: Float[] | Float;
  quantity_lt?: Float;
  quantity_lte?: Float;
  quantity_gt?: Float;
  quantity_gte?: Float;
  unit?: String;
  unit_not?: String;
  unit_in?: String[] | String;
  unit_not_in?: String[] | String;
  unit_lt?: String;
  unit_lte?: String;
  unit_gt?: String;
  unit_gte?: String;
  unit_contains?: String;
  unit_not_contains?: String;
  unit_starts_with?: String;
  unit_not_starts_with?: String;
  unit_ends_with?: String;
  unit_not_ends_with?: String;
  processing?: String;
  processing_not?: String;
  processing_in?: String[] | String;
  processing_not_in?: String[] | String;
  processing_lt?: String;
  processing_lte?: String;
  processing_gt?: String;
  processing_gte?: String;
  processing_contains?: String;
  processing_not_contains?: String;
  processing_starts_with?: String;
  processing_not_starts_with?: String;
  processing_ends_with?: String;
  processing_not_ends_with?: String;
  AND?: IngredientWhereInput[] | IngredientWhereInput;
  OR?: IngredientWhereInput[] | IngredientWhereInput;
  NOT?: IngredientWhereInput[] | IngredientWhereInput;
}

export interface ItemCreateInput {
  name: String;
  steps?: StepCreateManyInput;
}

export interface RecipeUpdateManyWithWhereNestedInput {
  where: RecipeScalarWhereInput;
  data: RecipeUpdateManyDataInput;
}

export interface StepCreateManyInput {
  create?: StepCreateInput[] | StepCreateInput;
  connect?: StepWhereUniqueInput[] | StepWhereUniqueInput;
}

export type RecipeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface StepCreateInput {
  directions: String;
  notes?: String;
  ingredients?: IngredientCreateManyInput;
}

export interface RecipeUpdateWithoutAuthorDataInput {
  title?: String;
  time?: String;
  skill?: String;
  course?: String;
  description?: String;
  items?: ItemUpdateManyInput;
}

export interface IngredientCreateManyInput {
  create?: IngredientCreateInput[] | IngredientCreateInput;
  connect?: IngredientWhereUniqueInput[] | IngredientWhereUniqueInput;
}

export interface RecipeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  author?: UserWhereInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  time?: String;
  time_not?: String;
  time_in?: String[] | String;
  time_not_in?: String[] | String;
  time_lt?: String;
  time_lte?: String;
  time_gt?: String;
  time_gte?: String;
  time_contains?: String;
  time_not_contains?: String;
  time_starts_with?: String;
  time_not_starts_with?: String;
  time_ends_with?: String;
  time_not_ends_with?: String;
  skill?: String;
  skill_not?: String;
  skill_in?: String[] | String;
  skill_not_in?: String[] | String;
  skill_lt?: String;
  skill_lte?: String;
  skill_gt?: String;
  skill_gte?: String;
  skill_contains?: String;
  skill_not_contains?: String;
  skill_starts_with?: String;
  skill_not_starts_with?: String;
  skill_ends_with?: String;
  skill_not_ends_with?: String;
  course?: String;
  course_not?: String;
  course_in?: String[] | String;
  course_not_in?: String[] | String;
  course_lt?: String;
  course_lte?: String;
  course_gt?: String;
  course_gte?: String;
  course_contains?: String;
  course_not_contains?: String;
  course_starts_with?: String;
  course_not_starts_with?: String;
  course_ends_with?: String;
  course_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  items_every?: ItemWhereInput;
  items_some?: ItemWhereInput;
  items_none?: ItemWhereInput;
  AND?: RecipeWhereInput[] | RecipeWhereInput;
  OR?: RecipeWhereInput[] | RecipeWhereInput;
  NOT?: RecipeWhereInput[] | RecipeWhereInput;
}

export interface ItemUpdateInput {
  name?: String;
  steps?: StepUpdateManyInput;
}

export interface RecipeUpdateManyWithoutAuthorInput {
  create?: RecipeCreateWithoutAuthorInput[] | RecipeCreateWithoutAuthorInput;
  delete?: RecipeWhereUniqueInput[] | RecipeWhereUniqueInput;
  connect?: RecipeWhereUniqueInput[] | RecipeWhereUniqueInput;
  set?: RecipeWhereUniqueInput[] | RecipeWhereUniqueInput;
  disconnect?: RecipeWhereUniqueInput[] | RecipeWhereUniqueInput;
  update?:
    | RecipeUpdateWithWhereUniqueWithoutAuthorInput[]
    | RecipeUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | RecipeUpsertWithWhereUniqueWithoutAuthorInput[]
    | RecipeUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: RecipeScalarWhereInput[] | RecipeScalarWhereInput;
  updateMany?:
    | RecipeUpdateManyWithWhereNestedInput[]
    | RecipeUpdateManyWithWhereNestedInput;
}

export interface StepUpdateManyInput {
  create?: StepCreateInput[] | StepCreateInput;
  update?:
    | StepUpdateWithWhereUniqueNestedInput[]
    | StepUpdateWithWhereUniqueNestedInput;
  upsert?:
    | StepUpsertWithWhereUniqueNestedInput[]
    | StepUpsertWithWhereUniqueNestedInput;
  delete?: StepWhereUniqueInput[] | StepWhereUniqueInput;
  connect?: StepWhereUniqueInput[] | StepWhereUniqueInput;
  set?: StepWhereUniqueInput[] | StepWhereUniqueInput;
  disconnect?: StepWhereUniqueInput[] | StepWhereUniqueInput;
  deleteMany?: StepScalarWhereInput[] | StepScalarWhereInput;
  updateMany?:
    | StepUpdateManyWithWhereNestedInput[]
    | StepUpdateManyWithWhereNestedInput;
}

export interface RecipeCreateWithoutAuthorInput {
  title: String;
  time: String;
  skill: String;
  course: String;
  description: String;
  items?: ItemCreateManyInput;
}

export interface StepUpdateWithWhereUniqueNestedInput {
  where: StepWhereUniqueInput;
  data: StepUpdateDataInput;
}

export type StepWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface StepUpdateDataInput {
  directions?: String;
  notes?: String;
  ingredients?: IngredientUpdateManyInput;
}

export interface StepUpdateManyMutationInput {
  directions?: String;
  notes?: String;
}

export interface IngredientUpdateManyInput {
  create?: IngredientCreateInput[] | IngredientCreateInput;
  update?:
    | IngredientUpdateWithWhereUniqueNestedInput[]
    | IngredientUpdateWithWhereUniqueNestedInput;
  upsert?:
    | IngredientUpsertWithWhereUniqueNestedInput[]
    | IngredientUpsertWithWhereUniqueNestedInput;
  delete?: IngredientWhereUniqueInput[] | IngredientWhereUniqueInput;
  connect?: IngredientWhereUniqueInput[] | IngredientWhereUniqueInput;
  set?: IngredientWhereUniqueInput[] | IngredientWhereUniqueInput;
  disconnect?: IngredientWhereUniqueInput[] | IngredientWhereUniqueInput;
  deleteMany?: IngredientScalarWhereInput[] | IngredientScalarWhereInput;
  updateMany?:
    | IngredientUpdateManyWithWhereNestedInput[]
    | IngredientUpdateManyWithWhereNestedInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface ItemUpdateWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput;
  data: ItemUpdateDataInput;
}

export interface ItemUpdateManyDataInput {
  name?: String;
}

export interface IngredientUpdateDataInput {
  name?: String;
  quantity?: Float;
  unit?: String;
  processing?: String;
}

export interface ItemScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: ItemScalarWhereInput[] | ItemScalarWhereInput;
  OR?: ItemScalarWhereInput[] | ItemScalarWhereInput;
  NOT?: ItemScalarWhereInput[] | ItemScalarWhereInput;
}

export interface IngredientUpsertWithWhereUniqueNestedInput {
  where: IngredientWhereUniqueInput;
  update: IngredientUpdateDataInput;
  create: IngredientCreateInput;
}

export interface RecipeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RecipeWhereInput;
  AND?: RecipeSubscriptionWhereInput[] | RecipeSubscriptionWhereInput;
  OR?: RecipeSubscriptionWhereInput[] | RecipeSubscriptionWhereInput;
  NOT?: RecipeSubscriptionWhereInput[] | RecipeSubscriptionWhereInput;
}

export interface IngredientScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  quantity?: Float;
  quantity_not?: Float;
  quantity_in?: Float[] | Float;
  quantity_not_in?: Float[] | Float;
  quantity_lt?: Float;
  quantity_lte?: Float;
  quantity_gt?: Float;
  quantity_gte?: Float;
  unit?: String;
  unit_not?: String;
  unit_in?: String[] | String;
  unit_not_in?: String[] | String;
  unit_lt?: String;
  unit_lte?: String;
  unit_gt?: String;
  unit_gte?: String;
  unit_contains?: String;
  unit_not_contains?: String;
  unit_starts_with?: String;
  unit_not_starts_with?: String;
  unit_ends_with?: String;
  unit_not_ends_with?: String;
  processing?: String;
  processing_not?: String;
  processing_in?: String[] | String;
  processing_not_in?: String[] | String;
  processing_lt?: String;
  processing_lte?: String;
  processing_gt?: String;
  processing_gte?: String;
  processing_contains?: String;
  processing_not_contains?: String;
  processing_starts_with?: String;
  processing_not_starts_with?: String;
  processing_ends_with?: String;
  processing_not_ends_with?: String;
  AND?: IngredientScalarWhereInput[] | IngredientScalarWhereInput;
  OR?: IngredientScalarWhereInput[] | IngredientScalarWhereInput;
  NOT?: IngredientScalarWhereInput[] | IngredientScalarWhereInput;
}

export interface IngredientSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: IngredientWhereInput;
  AND?: IngredientSubscriptionWhereInput[] | IngredientSubscriptionWhereInput;
  OR?: IngredientSubscriptionWhereInput[] | IngredientSubscriptionWhereInput;
  NOT?: IngredientSubscriptionWhereInput[] | IngredientSubscriptionWhereInput;
}

export interface ItemUpdateManyInput {
  create?: ItemCreateInput[] | ItemCreateInput;
  update?:
    | ItemUpdateWithWhereUniqueNestedInput[]
    | ItemUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ItemUpsertWithWhereUniqueNestedInput[]
    | ItemUpsertWithWhereUniqueNestedInput;
  delete?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
  connect?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
  set?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
  disconnect?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
  deleteMany?: ItemScalarWhereInput[] | ItemScalarWhereInput;
  updateMany?:
    | ItemUpdateManyWithWhereNestedInput[]
    | ItemUpdateManyWithWhereNestedInput;
}

export interface RecipeUpdateManyDataInput {
  title?: String;
  time?: String;
  skill?: String;
  course?: String;
  description?: String;
}

export interface IngredientUpdateManyDataInput {
  name?: String;
  quantity?: Float;
  unit?: String;
  processing?: String;
}

export interface RecipeUpsertWithWhereUniqueWithoutAuthorInput {
  where: RecipeWhereUniqueInput;
  update: RecipeUpdateWithoutAuthorDataInput;
  create: RecipeCreateWithoutAuthorInput;
}

export interface StepUpsertWithWhereUniqueNestedInput {
  where: StepWhereUniqueInput;
  update: StepUpdateDataInput;
  create: StepCreateInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  emailVerified?: Boolean;
  emailVerified_not?: Boolean;
  recipes_every?: RecipeWhereInput;
  recipes_some?: RecipeWhereInput;
  recipes_none?: RecipeWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface StepScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  directions?: String;
  directions_not?: String;
  directions_in?: String[] | String;
  directions_not_in?: String[] | String;
  directions_lt?: String;
  directions_lte?: String;
  directions_gt?: String;
  directions_gte?: String;
  directions_contains?: String;
  directions_not_contains?: String;
  directions_starts_with?: String;
  directions_not_starts_with?: String;
  directions_ends_with?: String;
  directions_not_ends_with?: String;
  notes?: String;
  notes_not?: String;
  notes_in?: String[] | String;
  notes_not_in?: String[] | String;
  notes_lt?: String;
  notes_lte?: String;
  notes_gt?: String;
  notes_gte?: String;
  notes_contains?: String;
  notes_not_contains?: String;
  notes_starts_with?: String;
  notes_not_starts_with?: String;
  notes_ends_with?: String;
  notes_not_ends_with?: String;
  AND?: StepScalarWhereInput[] | StepScalarWhereInput;
  OR?: StepScalarWhereInput[] | StepScalarWhereInput;
  NOT?: StepScalarWhereInput[] | StepScalarWhereInput;
}

export interface RecipeCreateManyWithoutAuthorInput {
  create?: RecipeCreateWithoutAuthorInput[] | RecipeCreateWithoutAuthorInput;
  connect?: RecipeWhereUniqueInput[] | RecipeWhereUniqueInput;
}

export interface StepUpdateManyWithWhereNestedInput {
  where: StepScalarWhereInput;
  data: StepUpdateManyDataInput;
}

export interface StepUpdateInput {
  directions?: String;
  notes?: String;
  ingredients?: IngredientUpdateManyInput;
}

export interface StepUpdateManyDataInput {
  directions?: String;
  notes?: String;
}

export interface ItemUpdateManyWithWhereNestedInput {
  where: ItemScalarWhereInput;
  data: ItemUpdateManyDataInput;
}

export interface ItemUpdateManyMutationInput {
  name?: String;
}

export interface ItemSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ItemWhereInput;
  AND?: ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput;
  OR?: ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput;
  NOT?: ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput;
}

export interface RecipeCreateInput {
  author: UserCreateOneWithoutRecipesInput;
  title: String;
  time: String;
  skill: String;
  course: String;
  description: String;
  items?: ItemCreateManyInput;
}

export interface RecipeScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  time?: String;
  time_not?: String;
  time_in?: String[] | String;
  time_not_in?: String[] | String;
  time_lt?: String;
  time_lte?: String;
  time_gt?: String;
  time_gte?: String;
  time_contains?: String;
  time_not_contains?: String;
  time_starts_with?: String;
  time_not_starts_with?: String;
  time_ends_with?: String;
  time_not_ends_with?: String;
  skill?: String;
  skill_not?: String;
  skill_in?: String[] | String;
  skill_not_in?: String[] | String;
  skill_lt?: String;
  skill_lte?: String;
  skill_gt?: String;
  skill_gte?: String;
  skill_contains?: String;
  skill_not_contains?: String;
  skill_starts_with?: String;
  skill_not_starts_with?: String;
  skill_ends_with?: String;
  skill_not_ends_with?: String;
  course?: String;
  course_not?: String;
  course_in?: String[] | String;
  course_not_in?: String[] | String;
  course_lt?: String;
  course_lte?: String;
  course_gt?: String;
  course_gte?: String;
  course_contains?: String;
  course_not_contains?: String;
  course_starts_with?: String;
  course_not_starts_with?: String;
  course_ends_with?: String;
  course_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: RecipeScalarWhereInput[] | RecipeScalarWhereInput;
  OR?: RecipeScalarWhereInput[] | RecipeScalarWhereInput;
  NOT?: RecipeScalarWhereInput[] | RecipeScalarWhereInput;
}

export interface UserCreateOneWithoutRecipesInput {
  create?: UserCreateWithoutRecipesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  name?: String;
  avatar?: String;
  slug?: String;
  emailVerified?: Boolean;
  recipes?: RecipeUpdateManyWithoutAuthorInput;
}

export interface UserCreateWithoutRecipesInput {
  email: String;
  password: String;
  name: String;
  avatar?: String;
  slug?: String;
  emailVerified?: Boolean;
}

export interface RecipeUpdateManyMutationInput {
  title?: String;
  time?: String;
  skill?: String;
  course?: String;
  description?: String;
}

export interface UserUpdateWithoutRecipesDataInput {
  email?: String;
  password?: String;
  name?: String;
  avatar?: String;
  slug?: String;
  emailVerified?: Boolean;
}

export interface UserUpdateOneRequiredWithoutRecipesInput {
  create?: UserCreateWithoutRecipesInput;
  update?: UserUpdateWithoutRecipesDataInput;
  upsert?: UserUpsertWithoutRecipesInput;
  connect?: UserWhereUniqueInput;
}

export interface RecipeUpdateInput {
  author?: UserUpdateOneRequiredWithoutRecipesInput;
  title?: String;
  time?: String;
  skill?: String;
  course?: String;
  description?: String;
  items?: ItemUpdateManyInput;
}

export interface ItemCreateManyInput {
  create?: ItemCreateInput[] | ItemCreateInput;
  connect?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserCreateInput {
  email: String;
  password: String;
  name: String;
  avatar?: String;
  slug?: String;
  emailVerified?: Boolean;
  recipes?: RecipeCreateManyWithoutAuthorInput;
}

export interface RecipeUpdateWithWhereUniqueWithoutAuthorInput {
  where: RecipeWhereUniqueInput;
  data: RecipeUpdateWithoutAuthorDataInput;
}

export interface ItemWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  steps_every?: StepWhereInput;
  steps_some?: StepWhereInput;
  steps_none?: StepWhereInput;
  AND?: ItemWhereInput[] | ItemWhereInput;
  OR?: ItemWhereInput[] | ItemWhereInput;
  NOT?: ItemWhereInput[] | ItemWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  password: String;
  name: String;
  avatar?: String;
  slug?: String;
  emailVerified: Boolean;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  slug: () => Promise<String>;
  emailVerified: () => Promise<Boolean>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  emailVerified: () => Promise<AsyncIterator<Boolean>>;
}

export interface ItemEdge {
  node: Item;
  cursor: String;
}

export interface ItemEdgePromise extends Promise<ItemEdge>, Fragmentable {
  node: <T = ItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ItemEdgeSubscription
  extends Promise<AsyncIterator<ItemEdge>>,
    Fragmentable {
  node: <T = ItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface IngredientConnection {
  pageInfo: PageInfo;
  edges: IngredientEdge[];
}

export interface IngredientConnectionPromise
  extends Promise<IngredientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IngredientEdge>>() => T;
  aggregate: <T = AggregateIngredientPromise>() => T;
}

export interface IngredientConnectionSubscription
  extends Promise<AsyncIterator<IngredientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IngredientEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIngredientSubscription>() => T;
}

export interface ItemConnection {
  pageInfo: PageInfo;
  edges: ItemEdge[];
}

export interface ItemConnectionPromise
  extends Promise<ItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ItemEdge>>() => T;
  aggregate: <T = AggregateItemPromise>() => T;
}

export interface ItemConnectionSubscription
  extends Promise<AsyncIterator<ItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateItemSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Step {
  id: ID_Output;
  directions: String;
  notes?: String;
}

export interface StepPromise extends Promise<Step>, Fragmentable {
  id: () => Promise<ID_Output>;
  directions: () => Promise<String>;
  notes: () => Promise<String>;
  ingredients: <T = FragmentableArray<Ingredient>>(
    args?: {
      where?: IngredientWhereInput;
      orderBy?: IngredientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface StepSubscription
  extends Promise<AsyncIterator<Step>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  directions: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
  ingredients: <T = Promise<AsyncIterator<IngredientSubscription>>>(
    args?: {
      where?: IngredientWhereInput;
      orderBy?: IngredientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StepSubscriptionPayload {
  mutation: MutationType;
  node: Step;
  updatedFields: String[];
  previousValues: StepPreviousValues;
}

export interface StepSubscriptionPayloadPromise
  extends Promise<StepSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StepPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StepPreviousValuesPromise>() => T;
}

export interface StepSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StepSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StepSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StepPreviousValuesSubscription>() => T;
}

export interface RecipePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  time: String;
  skill: String;
  course: String;
  description: String;
}

export interface RecipePreviousValuesPromise
  extends Promise<RecipePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  time: () => Promise<String>;
  skill: () => Promise<String>;
  course: () => Promise<String>;
  description: () => Promise<String>;
}

export interface RecipePreviousValuesSubscription
  extends Promise<AsyncIterator<RecipePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  time: () => Promise<AsyncIterator<String>>;
  skill: () => Promise<AsyncIterator<String>>;
  course: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface StepEdge {
  node: Step;
  cursor: String;
}

export interface StepEdgePromise extends Promise<StepEdge>, Fragmentable {
  node: <T = StepPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StepEdgeSubscription
  extends Promise<AsyncIterator<StepEdge>>,
    Fragmentable {
  node: <T = StepSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface IngredientEdge {
  node: Ingredient;
  cursor: String;
}

export interface IngredientEdgePromise
  extends Promise<IngredientEdge>,
    Fragmentable {
  node: <T = IngredientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IngredientEdgeSubscription
  extends Promise<AsyncIterator<IngredientEdge>>,
    Fragmentable {
  node: <T = IngredientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRecipe {
  count: Int;
}

export interface AggregateRecipePromise
  extends Promise<AggregateRecipe>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRecipeSubscription
  extends Promise<AsyncIterator<AggregateRecipe>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Ingredient {
  id: ID_Output;
  name: String;
  quantity: Float;
  unit?: String;
  processing?: String;
}

export interface IngredientPromise extends Promise<Ingredient>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  quantity: () => Promise<Float>;
  unit: () => Promise<String>;
  processing: () => Promise<String>;
}

export interface IngredientSubscription
  extends Promise<AsyncIterator<Ingredient>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  quantity: () => Promise<AsyncIterator<Float>>;
  unit: () => Promise<AsyncIterator<String>>;
  processing: () => Promise<AsyncIterator<String>>;
}

export interface RecipeConnection {
  pageInfo: PageInfo;
  edges: RecipeEdge[];
}

export interface RecipeConnectionPromise
  extends Promise<RecipeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RecipeEdge>>() => T;
  aggregate: <T = AggregateRecipePromise>() => T;
}

export interface RecipeConnectionSubscription
  extends Promise<AsyncIterator<RecipeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RecipeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRecipeSubscription>() => T;
}

export interface IngredientSubscriptionPayload {
  mutation: MutationType;
  node: Ingredient;
  updatedFields: String[];
  previousValues: IngredientPreviousValues;
}

export interface IngredientSubscriptionPayloadPromise
  extends Promise<IngredientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IngredientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IngredientPreviousValuesPromise>() => T;
}

export interface IngredientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IngredientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IngredientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IngredientPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  password: String;
  name: String;
  avatar?: String;
  slug?: String;
  emailVerified: Boolean;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  slug: () => Promise<String>;
  emailVerified: () => Promise<Boolean>;
  recipes: <T = FragmentableArray<Recipe>>(
    args?: {
      where?: RecipeWhereInput;
      orderBy?: RecipeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  emailVerified: () => Promise<AsyncIterator<Boolean>>;
  recipes: <T = Promise<AsyncIterator<RecipeSubscription>>>(
    args?: {
      where?: RecipeWhereInput;
      orderBy?: RecipeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface IngredientPreviousValues {
  id: ID_Output;
  name: String;
  quantity: Float;
  unit?: String;
  processing?: String;
}

export interface IngredientPreviousValuesPromise
  extends Promise<IngredientPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  quantity: () => Promise<Float>;
  unit: () => Promise<String>;
  processing: () => Promise<String>;
}

export interface IngredientPreviousValuesSubscription
  extends Promise<AsyncIterator<IngredientPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  quantity: () => Promise<AsyncIterator<Float>>;
  unit: () => Promise<AsyncIterator<String>>;
  processing: () => Promise<AsyncIterator<String>>;
}

export interface Recipe {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  time: String;
  skill: String;
  course: String;
  description: String;
}

export interface RecipePromise extends Promise<Recipe>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  author: <T = UserPromise>() => T;
  title: () => Promise<String>;
  time: () => Promise<String>;
  skill: () => Promise<String>;
  course: () => Promise<String>;
  description: () => Promise<String>;
  items: <T = FragmentableArray<Item>>(
    args?: {
      where?: ItemWhereInput;
      orderBy?: ItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface RecipeSubscription
  extends Promise<AsyncIterator<Recipe>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  author: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  time: () => Promise<AsyncIterator<String>>;
  skill: () => Promise<AsyncIterator<String>>;
  course: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  items: <T = Promise<AsyncIterator<ItemSubscription>>>(
    args?: {
      where?: ItemWhereInput;
      orderBy?: ItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Item {
  id: ID_Output;
  name: String;
}

export interface ItemPromise extends Promise<Item>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  steps: <T = FragmentableArray<Step>>(
    args?: {
      where?: StepWhereInput;
      orderBy?: StepOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ItemSubscription
  extends Promise<AsyncIterator<Item>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  steps: <T = Promise<AsyncIterator<StepSubscription>>>(
    args?: {
      where?: StepWhereInput;
      orderBy?: StepOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateStep {
  count: Int;
}

export interface AggregateStepPromise
  extends Promise<AggregateStep>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStepSubscription
  extends Promise<AsyncIterator<AggregateStep>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RecipeEdge {
  node: Recipe;
  cursor: String;
}

export interface RecipeEdgePromise extends Promise<RecipeEdge>, Fragmentable {
  node: <T = RecipePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RecipeEdgeSubscription
  extends Promise<AsyncIterator<RecipeEdge>>,
    Fragmentable {
  node: <T = RecipeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RecipeSubscriptionPayload {
  mutation: MutationType;
  node: Recipe;
  updatedFields: String[];
  previousValues: RecipePreviousValues;
}

export interface RecipeSubscriptionPayloadPromise
  extends Promise<RecipeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RecipePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RecipePreviousValuesPromise>() => T;
}

export interface RecipeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RecipeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RecipeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RecipePreviousValuesSubscription>() => T;
}

export interface AggregateIngredient {
  count: Int;
}

export interface AggregateIngredientPromise
  extends Promise<AggregateIngredient>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIngredientSubscription
  extends Promise<AsyncIterator<AggregateIngredient>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ItemPreviousValues {
  id: ID_Output;
  name: String;
}

export interface ItemPreviousValuesPromise
  extends Promise<ItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ItemSubscriptionPayload {
  mutation: MutationType;
  node: Item;
  updatedFields: String[];
  previousValues: ItemPreviousValues;
}

export interface ItemSubscriptionPayloadPromise
  extends Promise<ItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ItemPreviousValuesPromise>() => T;
}

export interface ItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ItemPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface StepConnection {
  pageInfo: PageInfo;
  edges: StepEdge[];
}

export interface StepConnectionPromise
  extends Promise<StepConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StepEdge>>() => T;
  aggregate: <T = AggregateStepPromise>() => T;
}

export interface StepConnectionSubscription
  extends Promise<AsyncIterator<StepConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StepEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStepSubscription>() => T;
}

export interface AggregateItem {
  count: Int;
}

export interface AggregateItemPromise
  extends Promise<AggregateItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateItemSubscription
  extends Promise<AsyncIterator<AggregateItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StepPreviousValues {
  id: ID_Output;
  directions: String;
  notes?: String;
}

export interface StepPreviousValuesPromise
  extends Promise<StepPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  directions: () => Promise<String>;
  notes: () => Promise<String>;
}

export interface StepPreviousValuesSubscription
  extends Promise<AsyncIterator<StepPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  directions: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Recipe",
    embedded: false
  },
  {
    name: "Item",
    embedded: false
  },
  {
    name: "Step",
    embedded: false
  },
  {
    name: "Ingredient",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
