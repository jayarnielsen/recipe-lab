scalar DateTime
scalar Upload

type Query {
  getUser: User
  recipes: [Recipe!]!
  recipe(id: ID!): Recipe
}

type Mutation {
  signup(email: String!, password: String!, name: String): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  avatarUpload(file: Upload!): File!
}

type AuthPayload {
  token: String!
  user: User!
}

type File {
  filename: String!
  mimetype: String!
  encoding: String!
}

type User {
  id: ID!
  createdAt: DateTime!
  email: String!
  name: String!
  avatar: String
  slug: String
  emailVerified: Boolean!
  recipes: [Recipe!]!
}

type Recipe {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
  title: String!
  time: String!
  skill: String!
  course: String!
  description: String!
  items: [Item!]!
}

type Item {
  id: ID!
  name: String!
  steps: [Step!]!
}

type Step {
  id: ID!
  directions: String!
  notes: String
  ingredients: [Ingredient!]!
}

type Ingredient {
  id: ID!
  name: String!
  quantity: Float!
  unit: String
  processing: String
}
